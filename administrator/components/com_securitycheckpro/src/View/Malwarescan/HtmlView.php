<?php
/**
 * @Securitycheckpro component
 * @copyright Copyright (c) 2011 - Jose A. Luque / Securitycheck Extensions
 * @license   GNU General Public License version 3, or later
 */

namespace SecuritycheckExtensions\Component\SecuritycheckPro\Administrator\View\Malwarescan;

defined('_JEXEC') or die;

use Joomla\CMS\MVC\View\HtmlView as BaseHtmlView;
use Joomla\CMS\Component\ComponentHelper;
use Joomla\CMS\Toolbar\ToolbarHelper;
use Joomla\CMS\Language\Text;
use Joomla\CMS\Factory;
use SecuritycheckExtensions\Component\SecuritycheckPro\Administrator\Model\BaseModel;


/**
 * Main Admin View
 */
class HtmlView extends BaseHtmlView {
    
    /**
     * Display the main view
     *
     * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.
     * @return  void
     */
    function display($tpl = null) {
		  
		ToolBarHelper::title(Text::_('Securitycheck Pro').' | ' .Text::_('COM_SECURITYCHECKPRO_MALWARESCAN'), 'securitycheckpro');

        // Obtenemos los datos del modelo
        $model = $this->getModel();
        $this->last_check_malwarescan = $model->loadStack("malwarescan_resume", "last_check_malwarescan");
        $this->files_scanned_malwarescan = $model->loadStack("malwarescan_resume", "files_scanned_malwarescan");
        $this->suspicious_files = $model->loadStack("malwarescan_resume", "suspicious_files");
		$this->time_taken = $model->loadStack("malwarescan_resume", "time_taken");
        $this->log_filename = $model->get_log_filename("filemalware_log", true);

        $task_ended = $model->get_campo_filemanager("estado_malwarescan");

        // Establecemos el tamao mximo de memoria que el script puede consumir
        $params = ComponentHelper::getParams('com_securitycheckpro');
        $this->deep_scan_status = $params->get('deep_scan', 0);
        $this->online_submission_type = $params->get('online_submission_type', 'Hashes');
        $this->timeline = $params->get('timeline', 7);
		$this->file_manager_include_exceptions_in_database = $params->get('file_manager_include_exceptions_in_database', 0);
		// Consultamos dónde han de ir los 'checkboxes'
		$this->checkbox_position = $params->get('checkbox_position','0');

        if ($this->deep_scan_status) {
            $this->deep_scan_status = Text::_('COM_SECURITYCHECKPRO_PLUGIN_ENABLED');
        } else
        {
            $this->deep_scan_status = Text::_('COM_SECURITYCHECKPRO_PLUGIN_DISABLED');
        }

        // Información para la barra de navegación
        $this->logs_pending = $model->LogsPending();
        $this->trackactions_plugin_exists = $model->PluginStatus(8);
       
        // Malwarescanstatus

        // Filtro por tipo de extensión
        $this->state= $model->getState();
        $malwarescan_search = $this->state->get('filter.malwarescan_search');
        $filter_malwarescan_status = $this->state->get('filter.malwarescan_status');

        // Establecemos el valor del filtro 'malwarescan_status' a cero para que muestre sólo los archivos sospechosos
        if ($filter_malwarescan_status == '') {
            $this->state->set('filter.malwarescan_status', 0);
        }

        $this->items = $model->loadStack("malwarescan", "malwarescan");
        $this->online_checked_files = $model->get_campo_filemanager("online_checked_files");
        $this->online_checked_hashes = $model->get_campo_filemanager("online_checked_hashes");
        $this->show_all = $this->state->get('showall', 0);
        $this->database_error = $model->get_campo_filemanager("estado_malwarescan");

        // Consultamos los valores de configuración
        $params = ComponentHelper::getParams('com_securitycheckpro');
        $this->opswat_key = $params->get('opswat_key', '');
        $this->online_submission_type = $params->get('online_submission_type', 'Hashes');
        
        if (!empty( $this->items)) {
            $this->pagination = $model->getPagination();            
            ToolBarHelper::custom('manage_online_logs', 'folder-2 ', 'folder-2 ', 'COM_SECURITYCHECKPRO_MANAGE_ONLINE_LOGS', false);
            ToolBarHelper::custom('csv_export_malware', 'out-2', 'out-2', 'COM_SECURITYCHECKPRO_EXPORT_INFO_CSV', false);
            ToolBarHelper::custom('delete_file', 'delete', 'delete', 'COM_SECURITYCHECKPRO_DELETE');
            ToolBarHelper::custom('view_file', 'eye-open', 'eye-open', 'COM_SECURITYCHECKPRO_VIEW_FILE');
        }
		
		$mainframe = Factory::getApplication();
		$jinput = $mainframe->input;
        
        $view = $jinput->get('view', null);
        $task = $jinput->get('task', null);
              
        // Inicializamos la variable de estado clean_tmp_dir_state                
        $mainframe->setUserState("clean_tmp_dir_state", Text::_('COM_SECURITYCHECKPRO_FILEMANAGER_ENDED'));
                                        
        if ($view == "malwarescan") {             
            if ($task != "view_file") {                 
                 // Si la tarea es distinta a "view_file" inicializamos la variable de estado 'contenido'
                 $mainframe->setUserState('contenido', "vacio");
            }
        }

        parent::display($tpl); 
    }


}